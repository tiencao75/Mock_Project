@startuml classDiagram
package Model {
    class MediaFile {
        - name: string
        - path: string
        - type: string
        - metadata: Metadata
        - duration: int
        + getName(): string
        + getPath(): string
        + getType(): string
        + getMetadata(): Metadata
        + getDuration(): int
        + setMetadata(metadata: Metadata): void
        + setType(type: string): void
        + setDuration(duration: int): void
    }

    class Metadata {
        - data: map<string, string>
        + getData(): map<string, string>
        + getValue(key: string): string
        + setData(data: map<string, string>): void
        + setValue(key: string, value: string): void
        + loadFromFile(filePath: string): void
        + saveToFile(filePath: string): void
    }

    class Playlist {
        - name: string
        - songs: map<unsigned int, MediaFile>
        + getName(): string
        + getSongs(): map<unsigned int, MediaFile>
        + addSong(id: unsigned int, song: MediaFile): void
        + removeSong(id: unsigned int): void
        + getSongById(id: unsigned int): MediaFile
        + setSongs(newSongs: map<unsigned int, MediaFile>): void
    }

    class PlaylistLibrary {
        - playlists: map<unsigned int, std::shared_ptr<Playlist>> playlists>
        + getAllPlaylists(): map<unsigned int, Playlist>
        + addPlaylist(index: unsigned int, playlist: Playlist): void
        + removePlaylist(index: unsigned int): void
        + getPlaylistByIndex(index: unsigned int): Playlist
        + setPlaylists(newPlaylists: map<unsigned int, Playlist>): void
    }

    class MediaLibrary {
        - mediaFiles: map<unsigned int, MediaFile>
        + getAllMediaFiles(): map<unsigned int, MediaFile>
        + addMediaFile(index: unsigned int, file: MediaFile): void
        + removeMediaFile(index: unsigned int): void
        + getMediaFileByIndex(index: unsigned int): MediaFile
        + scanDirectory(directory: string): void
        + scanUSBDevice(): void
        + displayPaginatedFiles(files: map<unsigned int, MediaFile>, pageSize: size_t): void
    }

    class PlayingMedia {
        - currentMediaFile: MediaFile
        - currentTime: int
        - isPlaying: bool
        - isPaused: bool
        - volume: int
        + getCurrentMediaFile(): MediaFile
        + setCurrentMediaFile(mediaFile: MediaFile): void
        + play(): void
        + pause(): void
        + resume(): void
        + stop(): void
        + skipToNext(): void
        + skipToPrevious(): void
        + adjustVolume(newVolume: int): void
    }

    class ModelManager {
        - mediaLibrary: MediaLibrary
        - playlistLibrary: PlaylistLibrary
        - playingMedia: PlayingMedia
        + getMediaLibrary(): MediaLibrary
        + getPlaylistLibrary(): PlaylistLibrary
        + getPlayingMedia(): PlayingMedia
    }

    ModelManager --> MediaLibrary
    ModelManager --> PlaylistLibrary
    ModelManager --> PlayingMedia
    MediaLibrary o--> MediaFile
    PlaylistLibrary o--> Playlist
    Playlist o--> MediaFile
    MediaFile o--> Metadata
}

package Controller {
    class ControllerManager {
        - modelManager: ModelManager
        - viewManager: ViewManager
        - scanfOptionController: ScanfOptionController
        - mainMenuController: MainMenuController
        - mediaFileController: MediaFileController
        - metadataController: MetadataController
        - playingMediaController: PlayingMediaController
        - playlistController: PlaylistController
        + handleInputData(): void
        + getModelManager(): ModelManager
        + getViewManager(): ViewManager
        + getPlayingMediaController(): PlayingMediaController
        + readDataFromFile(filename: string): map<string, string>
        + writeDataToFile(filename: string, data: map<string, string>): void
        + readPlaylistsFromFile(filename: string): void
    }

    class MainMenuController {
        - modelManager: ModelManager
        - viewManager: ViewManager
        + showMainMenu(): void
    }

    class MediaFileController {
        - modelManager: ModelManager
        - viewManager: ViewManager
        + getAllMediaFiles(): vector<MediaFile>
        + getMediaFileDetails(index: unsigned int): MediaFile
        + handleInput(): void
    }

    class MetadataController {
        - modelManager: ModelManager
        - viewManager: ViewManager
        + getMediaFileMetadata(file: MediaFile): map<string, string>
        + updateMediaFileMetadata(file: MediaFile, key: string, value: string): void
        + handleInput(): void
    }

    class PlayingMediaController {
        - modelManager: ModelManager
        - viewManager: ViewManager
        + playMediaFile(file: MediaFile): void
        + play(): void
        + pause(): void
        + resume(): void
        + stop(): void
        + skipToNext(): void
        + skipToPrevious(): void
        + adjustVolume(newVolume: size_t): void
        + play_Playlist(library: PlaylistLibrary): void
        + handleInput(): void
        + playVideoInThread(filePath: string): void
    }

    class PlaylistController {
        - modelManager: ModelManager
        - viewManager: ViewManager
        + handleInput(): void
        + writePlaylistsToFile(filename: string): void
    }

    class ScanfOptionController {
        - modelManager: ModelManager
        - viewManager: ViewManager
        + handleUSBScan(): void
        + handleInput(): void
    }

    ControllerManager --> MainMenuController
    ControllerManager --> MediaFileController
    ControllerManager --> MetadataController
    ControllerManager --> PlayingMediaController
    ControllerManager --> PlaylistController
    ControllerManager --> ScanfOptionController
}

package View {
    abstract class ViewBase {
        + show()
        + hide()
        + pauseScreen()
        + update(data: string)
        + getName(): string
    }

    class ViewScanfOption {
        + showScanMenu()
        + getDirectoryInput(): string
    }

    class ViewMediaFile {
        - currentPage: int
        + showMediaFilesPage(files: vector<MediaFile>, page: int)
        + nextPage()
        + previousPage()
    }

    class ViewPlaylist {
        + showPlaylistMenu()
        + showPlaylistList(playlists: vector<Playlist>)
        + selectPlaylist(playlist: Playlist)
    }

    class ViewDetailedPlaylist {
        + showPlaylistDetails(playlist: Playlist)
        + addMediaFileToPlaylist(file: MediaFile)
        + removeMediaFileFromPlaylist(file: MediaFile)
    }

    class ViewPlay {
        + showPlayerControls()
        + showSongInfo(file: MediaFile)
    }

    class ViewMetadata {
        + showFileMetadata(file: MediaFile)
        + editFileMetadata(file: MediaFile)
    }

    class ViewManager {
        - views: vector<ViewBase*>
        - currentView: ViewBase*
        + addView(view: ViewBase)
        + getView(name: string): ViewBase
        + switchView(view: ViewBase)
        + getCurrentView(): ViewBase
    }

    ViewManager o--> ViewBase
    ViewBase <|-- ViewScanfOption
    ViewBase <|-- ViewMediaFile
    ViewBase <|-- ViewPlaylist
    ViewBase <|-- ViewDetailedPlaylist
    ViewBase <|-- ViewPlay
    ViewBase <|-- ViewMetadata
}

package Hardware {
    class KL46ZBoard {
        - serialConnection: SerialPort*
        + connect()
        + disconnect()
        + readADC(): int
        + readButtons(): ButtonState
        + updateDisplay(text: string)
    }
}


enum ButtonType {
    PLAY_PAUSE
    NEXT
    PREVIOUS
    STOP
}

ViewManager <--* ControllerManager
ControllerManager *--> ModelManager
KL46ZBoard --> S32K144Interface
ControllerManager *--> S32K144Interface

S32K144Interface --> ButtonType : handles >



@enduml